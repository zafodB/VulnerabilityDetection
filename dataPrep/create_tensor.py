import pandas as pd
import json
import sys
import numpy as np
import pandas as pd
import uuid
import os


def load_strings(input_string):
    print(input_string[:500])

    sys.exit(0)

    return json.loads(input_string)


def load_numpy_data(numpy_file_location: str):

    file_location = os.path.split(numpy_file_location)[-1]

    file_location = os.path.join('D:/Downloads/data/numpys', file_location)

    # print(file_location)
    loaded = np.load(file=file_location)

    return loaded

def prepare_target_vector(input):
    vector = np.array(input)
    vector = np.transpose(vector)
    return vector

def load_data(data_location: str):
    df = pd.read_csv(filepath_or_buffer=data_location, delimiter=';', header=0, converters={'encoded_target': eval})

    df['encoded_text_array'] = df['encoded_text'].apply(lambda x: load_numpy_data(x))
    # print(df.head(5)['raw_text'])
    # print(df.head(5)['encoded_text'])
    # print(df.head(5)['raw_target'])
    # print(df.head(5)['encoded_target'])

    target = df.pop(item='encoded_target')

    target = target.apply(lambda x: prepare_target_vector(x))

    df.pop(item='raw_text')
    df.pop(item='raw_target')
    df.pop(item='encoded_text')

    df = df.iloc[:5]
    print(df.dtypes)

    # wtf = df.values

    print(type(target[1]))
    print(target[1])
    # for value in df.values:
    #     print(type(value))
    #     print(len(value))
    #     print(value[0].shape)

    # dataset = tf.data.Dataset.from_tensor_slices((df.values, target.values))

    # for feat, targ in dataset.take(5):
    #     print('Features: {}, Target: {}'.format(feat, targ))

    # return dataset


# load_data('D:/Downloads/data/train_data1.csv')

# float32_array = np.array(([[[0.51764709, 0.254, 0.24684, 0.88787, 0.549], [0.111, 0.112, 0.113, 0.114, 0.115]]]), np.float32)
# float32_array2 = np.array([[0.1111, 0.2222], [0.3333, 0.4444], [0.5555, 0.6666]], np.float32)
# float32_array3 = np.array([[0.51764709, 0.254], [0.24684, 0.88787], [0.549, 0.6789]], np.float32)
float32_array4 = np.array([0, 1, 0, 3, 4, 2])[np.newaxis]

# a = np.array([5,4])
# print(a)
# print(a.T)

print(float32_array4)
print(np.transpose(float32_array4))
# print(float32_array.tolist())
# print(list(float32_array))
#
# file_id = str(uuid.uuid4())
#
# np.save(file=(file_id + '.npy'), arr=float32_array)

# embedded_text = np.concatenate(([float32_array2, float32_array3]))
# print(embedded_text)
# print(embedded_text.shape)
#
# embedded_text = np.pad(array=embedded_text, pad_width=((0, 3), (0,0)), mode='constant', constant_values=(0,0))
#
# print(embedded_text)
# print(embedded_text.shape)
#
# embedded_text = np.vstack((float32_array, [np.zeros(shape=(2,5)) for _ in range(200)]))

# print(embedded_text)
# print(embedded_text.shape)

# df = pd.DataFrame(float32_array)

# print(df.iloc[0)

