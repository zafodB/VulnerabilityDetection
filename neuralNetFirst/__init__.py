import tensorflow as tf
import keras.backend.tensorflow_backend as tfback

from keras.preprocessing.sequence import pad_sequences
from keras.models import Sequential
from keras.layers.core import Dense, Reshape, Lambda, Permute
from keras.layers.recurrent import LSTM
from keras.layers.convolutional import Conv1D, MaxPooling1D
from keras import Input, Model
from keras.layers.merge import Concatenate
from keras.optimizers import Adam
from keras.utils.vis_utils import plot_model

import sys
import os


def stupid_setup():

    # Setup path for Graphviz plotting tool
    os.environ["PATH"] += os.pathsep + 'C:/Program Files (x86)/Graphviz2.38/bin/'

    # some random Keras bug as per: https://github.com/keras-team/keras/issues/13684
    def _get_available_gpus():
        """Get a list of available gpu devices (formatted as strings).

        # Returns
            A list of available GPU devices.
        """
        #global _LOCAL_DEVICES
        if tfback._LOCAL_DEVICES is None:
            devices = tf.config.list_logical_devices()
            tfback._LOCAL_DEVICES = [x.name for x in devices]
        return [x for x in tfback._LOCAL_DEVICES if 'device:gpu' in x.lower()]
    tfback._get_available_gpus = _get_available_gpus
    tfback._get_available_gpus()


stupid_setup()

print("hello there")

days = 2
embedding_length = 768
max_words_per_post = 100
actual_words_per_post = None # (Unknown)
# posts_per_day = None # (Unknown)
posts_per_day = 5

shared_day_conv = Conv1D(filters=40, kernel_size=1, strides=1)
shared_permute = Permute((2,1))
shared_day_maxpool = MaxPooling1D(pool_size=5, strides=3, data_format='channels_first')

shared_post_conv = Conv1D(filters=40, kernel_size=4, strides=1)
shared_post_maxpool = MaxPooling1D(pool_size=5, strides=3, data_format='channels_first')


# def build_day_highlights_model(input) -> Model:
#
#     branch_outputs = []
#
#     for i in range(posts_per_day):
#         out = Lambda(lambda x: x[:, i, :, :])(input)
#         print("After lambda: " + str(out.shape))
#
#         post_x = (shared_post_conv)(out)
#         print("After conv: " + str(post_x.shape))
#
#         post_x = (shared_permute)(post_x)
#         print("After permute: " + str(post_x.shape))
#
#         post_x = (shared_post_maxpool)(post_x)
#
#         branch_outputs.append(post_x)
#
#     merge_posts = Concatenate()(branch_outputs)
#     print("After merge: " + str(merge_posts.shape))
#
#     x1 = (shared_conv)(merge_posts)
#
#     print("After daily conv: " + str(x1.shape))
#     # x2 = (shared_permute)(x1)
#     x3 = (shared_maxpool)(x1)
#     return x3

# day_input = Input(shape=(posts_per_day, embedding_length))
# input_x = Input(shape=(posts_per_day, embedding_length, days))

# branch_outputs = []
# for i in range(num_channels):
#     # Slicing the ith channel:
#     out = Lambda(lambda x: x[:, i])(input)


input = Input(shape=(days, posts_per_day, max_words_per_post, embedding_length))

day_outputs = []

for i in range(days):
    day = Lambda(lambda x: x[ :, i, :, :, :])(input)

    post_outputs = []

    for j in range(posts_per_day):
        out = Lambda(lambda x: x[:, j, :, :])(day)
        # print("After lambda: " + str(out.shape))

        post_x = (shared_post_conv)(out)
        # print("After conv: " + str(post_x.shape))

        post_x = (shared_permute)(post_x)
        # print("After permute: " + str(post_x.shape))

        post_x = (shared_post_maxpool)(post_x)

        post_outputs.append(post_x)

    day_x = Concatenate()(post_outputs)
    # print("After merge: " + str(merge_posts.shape))

    day_x = (shared_day_conv)(day_x)

    # print("After daily conv: " + str(day_x.shape))
    # x2 = (shared_permute)(x1)
    day_x = (shared_day_maxpool)(day_x)
    day_outputs.append(day_x)

week_overview = Concatenate()(day_outputs)

output_x = LSTM(units=50)(week_overview)
output_x = Dense(10)(output_x)

model = Model(inputs=input, outputs= output_x)
model.compile(optimizer=Adam(learning_rate=0.01), loss='categorical_crossentropy')

# x_train = None
# paded_input = pad_sequences(None, padding='post')

print(model.summary())
plot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)

