import os

import numpy as np

from neuralNetFirst.nn_config import *
from neuralNetFirst import build_model, load_data

def evaluate_model(classification_threshold: float=0.09):
        
    print("Building model")
    model = build_model(DAYS, POSTS_PER_DAY, EMBEDDING_LENGTH, MAX_WORDS_PER_POST, TARGET_VECTOR_LENGTH, threshold = classification_threshold)

    print("Loading model weights")
    model.load_weights(os.path.join(model_directory_path, 'model_weights'))

    print("Loading data")
    features_shape = (DAYS, POSTS_PER_DAY, MAX_WORDS_PER_POST, EMBEDDING_LENGTH)
    evaluate_data = load_data(data_directory_path, features_shape, TARGET_VECTOR_LENGTH, n_rows=284,
                            batches=16)

    print("Evaluating data")
    results = model.evaluate(evaluate_data, steps=16)

    return results


metrics_at_threshlods = {}

for threshold in np.linspace(0.01, 0.1, 10):
    result = evaluate_model(classification_threshold=threshold)
    metrics_at_threshlods[threshold] = result

print(metrics_at_threshlods)

#print('Trying a single row')
#evaluate_data = load_data(data_directory_path, features_shape, TARGET_VECTOR_LENGTH, n_rows=1, batches=1)
#print(model.predict(evaluate_data))
