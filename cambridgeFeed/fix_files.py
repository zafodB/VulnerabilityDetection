import os
import sys

SQL_CONTROL_STRINGS_INSERT = [
    'COPY public."Forum" ("IdForum", "NumThreads", "Site", "Title", "LastParse", "URL", parsed, "NumPages") FROM stdin;\n',
    'COPY public."Thread" ("IdThread", "Site", "Author", "AuthorName", "Forum", "Heading", "NumPosts", "LastParse", "URL", parsed, "NumPages", "Direction") FROM stdin;\n',
    'COPY public."Post" ("IdPost", "Author", "Thread", "Timestamp", "Content", "AuthorNumPosts", "AuthorReputation", "LastParse", parsed, "Site", "CitedPost", "AuthorName") FROM stdin;\n',
    'COPY public."Member" ("IdMember", "Site", "Username", "Avatar", "RegistrationDate", "Age", "Signature", "Location", "localT", "TimeSpent", "LastVisitDue", "TotalPosts", "Reputation", "Prestige", "Homepage", "LastParse", parsed, "URL", "LastPostDate", "FirstPostDate") FROM stdin;\n',
    'COPY public."ReputationVotes" ("ID", "Donor", "Receiver", "Quantity", "Reason", "Timestamp", "Site") FROM stdin;\n',
    '\n',
    '\n'
]

SQL_CONTROL_STRINGS_SKIP = [
    'DROP DATABASE crimebb;\n',
    "CREATE DATABASE crimebb WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C' LC_CTYPE = 'C';\n",
    "\connect crimebb\n"
]

SQL_CONTROL_STRINGS_CHANGE = {
    'CREATE TABLE public."Forum" (\n': 'CREATE TABLE IF NOT EXISTS public."Forum" (\n',
    'CREATE TABLE public."Member" (\n': 'CREATE TABLE IF NOT EXISTS public."Member" (\n',
    'CREATE TABLE public."Post" (\n': 'CREATE TABLE IF NOT EXISTS public."Post" (\n',
    'CREATE TABLE public."ReputationVotes" (\n': 'CREATE TABLE IF NOT EXISTS public."ReputationVotes" (\n',
    'CREATE TABLE public."Site" (\n': 'CREATE TABLE IF NOT EXISTS public."Site" (\n',
    'CREATE TABLE public."Thread" (\n': 'CREATE TABLE IF NOT EXISTS public."Thread" (\n'

}

if len(sys.argv) == 2:
    # full_path = str(sys.argv[1])
    error_files_path = str(sys.argv[1])
    print('Errors file location: ' + error_files_path)
else:
    # print('Incorrect number of arguments.')
    sys.exit('Incorrect number of arguments. Required: 1. Got: ' + str(len(sys.argv) - 1))

with open(error_files_path, 'r', encoding='utf8') as errors_file:
    for line in errors_file:

        full_path = line.replace('\n', '')
        print("Now fixing file: " + full_path)

        number_pgdumps = 0

        with open(full_path, 'r', encoding='utf8') as databasefile:
            lines_read = 0
            for line in databasefile:

                lines_read += 1

                if lines_read % 100000 == 0:
                    print('Read ' + str(lines_read) + ' lines.')

                if line == '-- PostgreSQL database dump complete\n':
                    number_pgdumps += 1

        if number_pgdumps != 7:
            print('File is bad. Found this many pgdump breaks: ' + str(number_pgdumps))
        else:

            path, filename = os.path.split(full_path)
            filename = filename.replace('.sql', '_fixed.sql')

            if not os.path.exists(os.path.join(path, 'fixed')):
                os.mkdir(os.path.join(path, 'fixed'))

            insert_string_number = 0
            skip_lines = 0
            inserted_sequence = False

            with open(full_path, 'r', encoding='utf8') as database_file:
                with open(os.path.join(path, 'fixed', filename), 'w+', encoding='utf8') as fixed_file:
                    lines_read = 0
                    for line in database_file:

                        lines_read += 1

                        if lines_read % 10000 == 0:
                            print('Read ' + str(lines_read) + ' lines.')

                        if line in SQL_CONTROL_STRINGS_SKIP:
                            skip_lines += 1

                        if skip_lines > 0:
                            skip_lines -= 1
                            continue

                        if line in SQL_CONTROL_STRINGS_CHANGE.keys():
                            fixed_file.write(SQL_CONTROL_STRINGS_CHANGE[line])

                        elif line == '-- PostgreSQL database dump complete\n':

                            fixed_file.write(line)
                            fixed_file.write('--\n')
                            fixed_file.write('\n')
                            fixed_file.write(SQL_CONTROL_STRINGS_INSERT[insert_string_number])

                            inserted_sequence = True
                            skip_lines = 3
                            insert_string_number += 1

                        elif inserted_sequence:
                            if line == "\n" or line == '--\n':
                                fixed_file.write('\.\n')
                            else:
                                fixed_file.write(line)

                            inserted_sequence = False
                        else:
                            fixed_file.write(line)
